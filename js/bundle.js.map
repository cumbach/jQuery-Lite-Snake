{"version":3,"sources":["webpack/bootstrap 056ba536b87ebef0b2e5","./js/main.js","./js/snake_view.js","./js/snake.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACLD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB,SAAS;AAC1B;AACA;;AAEA,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA,OAAM;AACN;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAmB,SAAS;AAC5B,sBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA,oBAAmB,SAAS;AAC5B,sBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;AASA;;;;;;;ACnIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,kBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH,OAAM;AACN;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;;AAEA,qBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA,sBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;;;AAGL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB,SAAS;AAC1B,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;;;AAIA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/js/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 056ba536b87ebef0b2e5\n **/","var View = require('./snake_view.js');\n\n$l(function () {\n  var rootEl = $l('.snake-game');\n  new View(rootEl);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/main.js\n ** module id = 0\n ** module chunks = 0\n **/","var Board = require('./snake.js');\n\nvar View = function($el) {\n  this.$el = $el;\n  this.board = new Board();\n  this.setupViewGrid();\n  window.addEventListener(\"keydown\", this.handleKeyEvent.bind(this));\n  this.intervalID = window.setInterval(this.step.bind(this), 100);\n};\n\nvar KEYCODES = {\n  37: \"W\",\n  38: \"N\",\n  39: \"E\",\n  40: \"S\"\n};\n\nView.prototype.handleKeyEvent = function (event) {\n  this.board.snake.turn(KEYCODES[event.keyCode]);\n};\n\nView.prototype.setupViewGrid = function () {\n  for (var i = 0; i <= 20; i++) {\n    // debugger;\n    var $ul = $l(document.createElement(\"ul\"));\n\n    for (var j = 0; j <= 20; j++) {\n      var $li = $l(document.createElement('li'));\n      // debugger;\n      $li.attr('pos', [i,j]);\n      $ul.append($li);\n    }\n    // debugger;\n    this.$el.append($ul);\n  }\n\n  this.renderApple();\n  // this.renderMines();\n  this.$li = this.$el.find('li');\n  this.$h1 = $l('h1');\n  // this.$el.append(this.$h1);\n  this.$h1.addClass(\"count\");\n  // this.$h1.text(\"SCORE: 0\");\n};\n\nView.prototype.renderApple = function () {\n  var position = this.board.apple.position;\n\n  this.$apple = $l(\"li[pos='\" + position.x + \",\" + position.y + \"']\");\n  this.$apple.addClass('apple');\n};\n\n// View.prototype.renderMines = function () {\n//   var positions = this.board.mines.map(function(mine){\n//     return mine.position;\n//   });\n//   positions.forEach(function(position){\n//     this.$mines = $(\"li[pos='\" + position.x + \",\" + position.y + \"']\");\n//     this.$mines.addClass('mine');\n//   });\n// };\n\nView.prototype.viewRender = function () {\n  this.$li.removeClass();\n  var view = this;\n  var segments = this.board.snake.segments;\n\n  segments.forEach(function(segment){\n    for (var i = 0; i <= 20; i++) {\n      for (var j = 0; j <= 20; j++) {\n        if (segment.x === i && segment.y === j) {\n          this.$snake = $l(\"li[pos='\" + i + \",\" + j + \"']\");\n          this.$snake.addClass(\"snake2\");\n        }\n        if (view.board.snake.head().x === i && view.board.snake.head().y === j) {\n          this.$head = $l(\"li[pos='\" + i + \",\" + j + \"']\");\n          this.$head.removeClass('snake2');\n          this.$head.addClass(\"head\");\n        }\n      }\n    }\n  });\n\n  var segments2 = this.board.snake2.segments;\n\n  segments2.forEach(function(segment){\n    for (var i = 0; i <= 20; i++) {\n      for (var j = 0; j <= 20; j++) {\n        if (segment.x === i && segment.y === j) {\n          this.$snake2 = $l(\"li[pos='\" + i + \",\" + j + \"']\");\n          this.$snake2.addClass(\"snake\");\n        }\n        if (view.board.snake2.head().x === i && view.board.snake2.head().y === j) {\n          this.$head = $l(\"li[pos='\" + i + \",\" + j + \"']\");\n          this.$head.removeClass('snake');\n          this.$head.addClass(\"head\");\n        }\n      }\n    }\n  });\n\n  // this.$h1.text('SCORE: ' + this.board.count)\n  this.renderApple();\n  // this.renderMines();\n\n};\n\n\nView.prototype.step = function () {\n    this.board.snake.move();\n    this.board.snake2.move();\n  if (this.board.snake.segments.length !== 0) {\n    this.viewRender();\n  } else {\n    this.$el.empty();\n    this.$over = $l('<over>');\n    this.$over.html(\"Game Over\\nFinal Score: \" + this.board.count);\n    this.$el.append(this.$over);\n    this.$el.removeClass();\n\n    window.clearInterval(this.intervalID);\n  }\n};\n\n\n\n\n\n\n\n\nmodule.exports = View;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake_view.js\n ** module id = 1\n ** module chunks = 0\n **/","function Coord (x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nCoord.prototype.plus = function (coord2) {\n  return new Coord(this.x + coord2.x, this.y + coord2.y);\n};\n\nCoord.prototype.equals = function (coord2) {\n  return (this.x === coord2.x) && (this.y === coord2.y);\n};\n\nCoord.prototype.isOpposite = function (coord2) {\n  return (this.x === (-1 * coord2.x)) && (this.y === (-1 * coord2.y));\n};\n\nfunction Apple (board) {\n  this.board = board;\n\n  this.replace();\n}\n\nApple.prototype.replace = function () {\n  // var x = Math.floor(Math.random() * 20);\n  // var y = Math.floor(Math.random() * 20);\n\n  var x = Math.floor(Math.random() * 20);\n  var y = Math.floor(Math.random() * 20);\n\n  while (this.board.snake.isOccupying([x,y])) {\n    x = Math.floor(Math.random() * 20);\n    y = Math.floor(Math.random() * 20);\n  }\n  // debugger\n\n  this.position = new Coord(x,y);\n};\n\n// function Mine (board) {\n//   this.board = board;\n//\n//   this.replace();\n// }\n//\n// Mine.prototype.replace = function () {\n//   // var x = Math.floor(Math.random() * 20);\n//   // var y = Math.floor(Math.random() * 20);\n//\n//   var x = Math.floor(Math.random() * 20);\n//   var y = Math.floor(Math.random() * 20);\n//\n//   while (this.board.snake.isOccupying([x,y])) {\n//     x = Math.floor(Math.random() * 20);\n//     y = Math.floor(Math.random() * 20);\n//   }\n//   // debugger\n//\n//   this.position = new Coord(x,y);\n// };\n\nfunction Snake (board) {\n  this.board = board;\n  this.direction = \"E\";\n  this.segments = [new Coord(0,0), new Coord(0,1), new Coord(0,2)];\n}\n\nSnake.prototype.head = function () {\n  return this.segments[this.segments.length -1];\n};\n\nSnake.prototype.isOccupying = function (array) {\n  var result = false;\n  this.segments.forEach(function (segment) {\n    if (segment.x === array[0] && segment.y === array[1]) {\n      result = true;\n      return result;\n    }\n  });\n  return result;\n};\n\nSnake.prototype.move = function () {\n  var mineHit = false;\n\n  // this.board.mines.forEach(function(mine){\n  //   if (mine.position.equals(this.head())) {\n  //     mineHit = true;\n  //   }\n  // }.bind(this));\n\n  if (mineHit) {\n    this.segments = [];\n  } else if (this.board.apple.position.equals(this.head()) &&\n      this.board.moveInBoard()) {\n    this.board.apple.replace();\n    // this.board.mines.push(new Mine(this.board));\n    this.board.count += 1;\n    this.segments.push(this.head().plus(Snake.DIFFS[this.direction]));\n  } else if (this.board.moveInBoard()) {\n    this.segments.push(this.head().plus(Snake.DIFFS[this.direction]));\n    this.segments.shift();\n  } else {\n    this.segments = [];\n  }\n  // debugger;\n  for (var i = 0; i < this.segments.length - 1; i++) {\n    if (this.segments[i].equals(this.head())) {\n      this.segments = [];\n    }\n  }\n  // debugger;\n};\n\n\nSnake.DIFFS = {\n  \"N\": new Coord(-1, 0),\n  \"E\": new Coord(0, 1),\n  \"S\": new Coord(1, 0),\n  \"W\": new Coord(0, -1)\n};\n\nSnake.prototype.turn = function (newDirection) {\n  // console.log(!Snake.DIFFS[this.direction].isOpposite(Snake.DIFFS[newDirection]));\n\n  if (!Snake.DIFFS[this.direction].isOpposite(Snake.DIFFS[newDirection])) {\n    this.direction = newDirection;\n  }\n};\n\nSnake.prototype.grow = function () {\n  if (this.board.moveInBoard()) {\n    this.segments.push(this.head().plus(Snake.DIFFS[this.direction]));\n    // this.segments.shift();\n  } else {\n    this.segments = [];\n  }\n};\n\nfunction Snake2 (board) {\n  this.board = board;\n  this.direction = \"W\";\n  this.segments = [new Coord(18,18), new Coord(17,18), new Coord(16,18)];\n}\n\nSnake2.prototype.head = function () {\n  return this.segments[this.segments.length -1];\n};\n\nSnake2.prototype.isOccupying = function (array) {\n  var result = false;\n  this.segments.forEach(function (segment) {\n    if (segment.x === array[0] && segment.y === array[1]) {\n      result = true;\n      return result;\n    }\n  });\n  return result;\n};\n\nSnake2.prototype.move = function () {\n\n  if (this.board.apple.position.equals(this.head())) {\n    this.board.apple.replace();\n    this.board.count -= 1;\n    this.segments.push(this.head().plus(Snake.DIFFS[this.direction]));\n  } else {\n  // } else if (this.board.moveInBoard()) {\n  //\n    this.segments.push(this.head().plus(Snake.DIFFS[this.direction]));\n    this.segments.shift();\n  // } else {\n  //\n  //   this.segments = [];\n  }\n\n  // for (var i = 0; i < this.segments.length - 1; i++) {\n  //   if (this.segments[i].equals(this.head())) {\n  //     this.segments = [];\n  //   }\n  // }\n\n  this.aI();\n\n};\n\nSnake2.prototype.aI = function() {\n\n  var nextMove = this.head().plus(Snake.DIFFS[this.direction]);\n  var newDirection = this.direction;\n  if (nextMove.x <= 0 || nextMove.x >= 20 || nextMove.y <= 0 || nextMove.y >= 20) {\n\n\n    Object.keys(Snake.DIFFS).forEach(function(direction){\n      var head = this.head();\n\n      for (var i = 0; i < 5; i++) {\n        head = head.plus(Snake.DIFFS[direction]);\n      }\n\n      if (head.x >= 0 &&\n          head.y >= 0 &&\n          head.x <= 20 &&\n          head.y <= 20 &&\n          !Snake.DIFFS[this.direction].isOpposite(Snake.DIFFS[direction])) {\n        newDirection = direction;\n      }\n\n    }.bind(this));\n\n\n  }\n  this.turn(newDirection);\n};\n\nSnake2.prototype.turn = function (newDirection) {\n  Object.keys(Snake.DIFFS).forEach(function(direction){\n    var head = this.head();\n    // debugger;\n    for (var i = 0; i < 20; i++) {\n      head = head.plus(Snake.DIFFS[direction]);\n      if (this.board.apple.position.equals(head)) {\n        if (!Snake.DIFFS[this.direction].isOpposite(Snake.DIFFS[direction])) {\n          newDirection = direction;\n        }\n        break;\n      }\n    }\n  }.bind(this));\n\n  this.direction = newDirection;\n\n  // if (!Snake.DIFFS[this.direction].isOpposite(Snake.DIFFS[newDirection])) {\n  //   this.direction = newDirection;\n  // } else {\n  //   while (true) {\n  //     newDirection = Object.keys(Snake.DIFFS)[Math.floor(Math.random() * 4)];\n  //     if (!Snake.DIFFS[this.direction].isOpposite(Snake.DIFFS[newDirection]) &&\n  //         Snake.DIFFS[this.direction] !== Snake.DIFFS[newDirection]) {\n  //       console.log(Snake.DIFFS[this.direction]);\n  //       console.log(Snake.DIFFS[newDirection]);\n  //       this.direction = newDirection;\n  //       break;\n  //     }\n  //   }\n  // }\n};\n\nSnake2.prototype.grow = function () {\n  if (this.board.moveInBoard()) {\n    this.segments.push(this.head().plus(Snake.DIFFS[this.direction]));\n    // this.segments.shift();\n  } else {\n    this.segments = [];\n  }\n};\n\nfunction Board () {\n  this.snake = new Snake(this);\n  this.snake2 = new Snake2(this);\n  this.grid = [];\n  this.setupGrid();\n  this.apple = new Apple(this);\n  // this.mines = [];\n  // this.mines.push(new Mine(this));\n  this.count = 0;\n}\n\nBoard.prototype.moveInBoard = function () {\n  var head = this.snake.head();\n  return (head.x >= 0 && head.x <= 20 && head.y >= 0 && head.y <= 20);\n};\n\nBoard.prototype.setupGrid = function () {\n  for (var i = 0; i <= 20; i++) {\n    for (var j = 0; j <= 20; j++) {\n      this.grid.push([i,j]);\n    }\n  }\n};\n\nBoard.prototype.render = function () {\n  this.snake.segments.forEach(function (segment) {\n    this.grid[segment.x, segment.y] = \"Z\";\n  }.bind(this));\n};\n\n\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/snake.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}